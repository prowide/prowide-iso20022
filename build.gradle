buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal()
	}
	dependencies {
		classpath 'ru.vyarus:gradle-quality-plugin:4.7.0'
		classpath 'pl.allegro.tech.build:axion-release-plugin:1.13.6'
		classpath 'io.github.gradle-nexus:publish-plugin:2.0.0'
		classpath 'com.diffplug.spotless:spotless-plugin-gradle:6.13.0' // above this version requires Java 11
	}
}
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'java-library-distribution'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'ru.vyarus.quality'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

archivesBaseName = 'pw-iso20022'
group 'com.prowidesoftware'

project.ext {
	SRU = 'SRU2024'
}

scmVersion {
	tag {
		prefix = "${SRU}"
		versionSeparator = '-'
	}
}
project.version = "${SRU}-${scmVersion.version}"

allprojects {

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
		java {
			toolchain {
				languageVersion.set(JavaLanguageVersion.of(8))
			}
		}
		doLast {
			if (getJavaCompiler().isPresent()) {
				println 'Compiling with ' + getJavaCompiler().get().getMetadata().getInstallationPath()
			}
		}
	}

	repositories {
		mavenCentral()
		// Prowide repo releases
		if (project.hasProperty('prowideRepo')) {
			maven {
				url "${project.prowideRepo}/repository/maven-releases/"
				credentials {
					username "${project.prowideRepoUser}"
					password "${project.prowideRepoPass}"
				}
				maven {
					url "${project.prowideRepo}/repository/maven-snapshots/"
					credentials {
						username "${project.prowideRepoUser}"
						password "${project.prowideRepoPass}"
					}
				}
			}
		}
	}

	sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']

	tasks.withType(Jar) {
		manifest.attributes(
			'Specification-Title': 'Prowide ISO 20022',
			'Specification-Version': project.version,
			'Specification-Vendor': "${SRU}",
			'Implementation-Title': 'Prowide ISO 20022',
			'Implementation-Version': project.version,
			'Implementation-Vendor': 'www.prowidesoftware.com',
			'Built-OS': System.getProperty('os.name'),
			'Source-Compatibility': project.sourceCompatibility,
			'Target-Compatibility': project.targetCompatibility,
			'Built-Date': new Date().format("yyyy-MM-dd"),
			'Automatic-Module-Name': 'com.prowidesoftware.iso20022'
		)
	}
}

subprojects {
	apply plugin: 'java-library'

	version = rootProject.version

	dependencies {
		implementation 'org.apache.commons:commons-lang3:3.17.0'
		implementation 'com.google.code.gson:gson:2.11.0'
	}

	tasks.withType(Jar) {
		archivesBaseName = "pw-iso20022-${project.name}"
	}

	sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']
}

configure(subprojects.findAll {it.name != 'model-common-types'}) {
	dependencies {
		api project(':model-common-types')
	}
}

configure(subprojects.findAll {it.name.endsWith('-mx')}) {
	def specificTypesProject = ':' + it.name.replace('-mx', '-types')
	dependencies {
		api project(':iso20022-core')
		implementation project(specificTypesProject)
		implementation 'org.apache.commons:commons-lang3:3.17.0'
		implementation 'com.google.code.gson:gson:2.11.0'
		compileOnly 'javax.persistence:javax.persistence-api:2.2'
	}
}

configure(subprojects.findAll {it.name.endsWith('-types')}) {
	javadoc.enabled = false
}
configure(subprojects.findAll {it.name.endsWith('-mx')}) {
	javadoc.enabled = false
}

project(':iso20022-core') {
	dependencies {
		// included build
		api 'com.prowidesoftware:pw-swift-core:SRU2024-9.5.5'

		implementation 'org.apache.commons:commons-lang3:3.17.0'
		implementation 'com.google.code.gson:gson:2.11.0'

		compileOnly 'javax.persistence:javax.persistence-api:2.2'
		compileOnly 'javax.validation:validation-api:2.0.1.Final'

		testImplementation 'javax.persistence:javax.persistence-api:2.2'
		testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
		testImplementation 'com.google.guava:guava:33.2.0-jre'
		testImplementation 'org.assertj:assertj-core:3.27.0'
		testImplementation 'org.xmlunit:xmlunit-core:2.10.0'
		testImplementation 'org.xmlunit:xmlunit-matchers:2.10.0'
		testImplementation 'org.xmlunit:xmlunit-assertj:2.10.0'
		testImplementation project(':model-acmt-mx')
		testImplementation project(':model-acmt-types')
		testImplementation project(':model-camt-mx')
		testImplementation project(':model-camt-types')
		testImplementation project(':model-catm-mx')
		testImplementation project(':model-catm-types')
		testImplementation project(':model-fxtr-mx')
		testImplementation project(':model-fxtr-types')
		testImplementation project(':model-pacs-mx')
		testImplementation project(':model-pacs-types')
		testImplementation project(':model-pain-mx')
		testImplementation project(':model-pain-types')
		testImplementation project(':model-sese-mx')
		testImplementation project(':model-sese-types')
		testImplementation project(':model-seev-mx')
		testImplementation project(':model-seev-types')
		testImplementation project(':model-xsys-mx')
		testImplementation project(':model-xsys-types')
	}

	tasks.withType(Jar) {
		archivesBaseName = 'pw-iso20022-core'
	}

	test {
		useJUnitPlatform()
	}

	apply plugin: 'com.diffplug.spotless'

	spotless {
		java {
			target '**/src/main/java/**/*.java', '**/src/test/java/**/*.java'
			palantirJavaFormat()
		}
	}

	test.finalizedBy(spotlessCheck)
}

jar {
	dependsOn subprojects.jar
	archivesBaseName = 'pw-iso20022'
	subprojects.each { subproject ->
		from subproject.configurations.archives.allArtifacts.files.collect {
			zipTree(it)
		}
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('sourcesJar', Jar) {
	dependsOn classes
	archiveClassifier = 'sources'
	subprojects.each { subproject ->
		from subproject.sourceSets.main.allSource
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def formattedDate() {
	new Date().format('dd MMM yyyy')
}

// define an array of project names
def projectsIncludedInJavadoc = [
	'iso20022-core',
//	'model-acmt-mx',
//	'model-admi-mx',
//	'model-auth-mx',
	'model-caaa-mx',
	'model-caad-mx',
	'model-caam-mx',
	'model-cafc-mx',
	'model-cain-mx',
	'model-camt-mx',
//	'model-casp-mx',
//	'model-catm-mx',
//	'model-catp-mx',
//	'model-cbrf-mx',
//	'model-colr-mx',
//	'model-fxtr-mx',
	'model-pacs-mx',
	'model-pain-mx',
//	'model-reda-mx',
//	'model-remt-mx',
//	'model-secl-mx',
	'model-seev-mx',
	'model-semt-mx',
	'model-sese-mx',
	'model-seti-mx',
	'model-setr-mx',
//	'model-supl-mx',
//	'model-trck-mx',
//	'model-trea-mx',
	'model-tsin-mx',
	'model-tsmt-mx',
	'model-tsrv-mx',
	'model-xsys-mx'
]

javadoc {
	group = 'Documentation'
	description = 'Generate javadocs from all child projects as if it was a single project'

	verbose false
	failOnError false
	//maxMemory = 2G
	destinationDir = file("$buildDir/docs/javadoc")

	options.overview = "overview.html"
	options.header = "${version}"
	options.windowTitle = "Prowide ISO 20022 API Reference"
	title = "Prowide ISO 20022 API Reference"
	options.footer="${SRU}, generated ${formattedDate()}"
	options.author false
	options.links 'http://docs.oracle.com/javase/8/docs/api/'

	// this will fail when the option is not available (older JDK)
	options.addBooleanOption("-allow-script-in-comments", true)

	options.bottom = '<script src="//static.getclicky.com/js"></script><script>try{ clicky.init(101039278); }catch(e){}</script>'

	// exclude the dictionary package because it is huge; and being simple POJO classes does not add to much value to the Javadoc
//	exclude "**/dic/**"

	// exclude miscellaneous/generic categories
//	exclude "**/model/mx/MxAcmt**"
//	exclude "**/model/mx/MxAdmi**"
//	exclude "**/model/mx/MxAuth**"
//	exclude "**/model/mx/MxCbrf**"
//	exclude "**/model/mx/MxColr**"
//	exclude "**/model/mx/MxFxtr**"
//	exclude "**/model/mx/MxReda**"
//	exclude "**/model/mx/MxTrck**"

	options.addStringOption('Xdoclint:none', '-quiet')
	options.addStringOption('encoding', 'UTF-8')
	options.addStringOption('charSet', 'UTF-8')

	// iterate projectsIncludedInJavadoc array and include projects source folders in the javadoc
	projectsIncludedInJavadoc.each { projectName ->
		project(projectName).tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}

tasks.register('javadocJar', Jar) {
	dependsOn javadoc
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar, sourcesJar
}

// declared dependencies for pom generation
dependencies {
	// included build (keep in sync with the latest Prowide Core version)
	api 'com.prowidesoftware:pw-swift-core:SRU2024-9.5.5'
	implementation 'org.apache.commons:commons-lang3:3.17.0'
	implementation 'com.google.code.gson:gson:2.11.0'
}

// repo for publishing
project.ext {
	nexusRepo = project.version.endsWith('-SNAPSHOT') ? 'maven-snapshots' : 'maven-releases'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			versionMapping {
				usage('java-api') {
					fromResolutionOf('runtimeClasspath')
				}
				usage('java-runtime') {
					fromResolutionResult()
				}
			}
			afterEvaluate {
				from components.java
				groupId = 'com.prowidesoftware'
				artifactId = 'pw-iso20022'
				version = "${version}"
				pom {
					name = 'Prowide ISO 20022'
					description = 'Prowide Library for ISO 20022 messages'
					url = 'http://www.prowidesoftware.com'
					scm {
						url = 'https://github.com/prowide/prowide-iso20022.git'
						connection = 'git@github.com:prowide/prowide-iso20022.git'
					}
					inceptionYear = '2020'
					licenses {
						license {
							name = 'Apache License Version 2.0'
							url = 'https://www.apache.org/licenses/LICENSE-2.0'
							distribution = 'repo'
						}
					}
					developers {
						developer {
							id = 'zubri'
							name = 'Sebastian Zubrinic'
							email = 'sebastian@prowidesoftware.com'
						}
					}
					organization {
						name = 'Prowide'
						url = 'http://www.prowidesoftware.com'
					}
				}
			}
		}
	}

	// Prowide repo releases
	if (project.hasProperty('prowideRepo')) {
		repositories {
			maven {
				url "${project.prowideRepo}/repository/${nexusRepo}/"
				credentials {
					username "${project.prowideRepoUser}"
					password "${project.prowideRepoPass}"
				}
			}
		}
	} else {
		project.logger.info('Prowide publishing disabled because repository properties are undefined')
	}
}
jar.finalizedBy generatePomFileForMavenJavaPublication

tasks.withType(GenerateModuleMetadata) {
	// to avoid metadata in the generated pom.xml files
	enabled = false
}

// OSS Sonatype releases
signing {
	required { project.hasProperty('SONATYPE_RELEASE') }
	sign publishing.publications.mavenJava
}
java {
	withJavadocJar()
	withSourcesJar()
}
nexusPublishing {
	repositories {
		sonatype()
	}
}

// Zip GitHub releases
distributions {
	main {
		contents {
			from javadocJar
			from sourcesJar
			into ('lib') {
				from (rootProject.configurations.runtimeClasspath)
			}
			from files('LICENSE.txt')
			from files('CHANGELOG.md')
			from ("$buildDir/publications/mavenJava/pom-default.xml") {
				rename ".*", "pom.xml"
			}
		}
	}
}

distTar.enabled = false

distZip {
	dependsOn generatePomFileForMavenJavaPublication
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Alternative (manual) staging upload to OSS Sonatype
tasks.register('bundle', Jar) {
	dependsOn build
	onlyIf {
		project.hasProperty('SONATYPE_RELEASE')
	}
	description 'Creates the bundle.jar for Maven Central distribution'
	from jar
	from sourcesJar
	from javadocJar
	from ("$buildDir/publications/mavenJava/pom-default.xml") {
		rename ".*", "pom.xml"
	}
	from ("$buildDir/publications/mavenJava/pom-default.xml.asc") {
		rename ".*", "pom.xml.asc"
	}
	from ("$buildDir/libs") {
		include '*.asc'
	}
	archiveFileName.set('bundle.jar')
}

tasks.withType(Test) {
	doFirst {
		println 'Running test on ' + getJavaLauncher().get().getMetadata().getInstallationPath()
	}
}

task('testOn11', type: Test) {
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

task('testOn17', type: Test) {
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

task('testOn21', type: Test) {
	javaLauncher = javaToolchains.launcherFor {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

quality {
	strict = false
	// we limit this to spotbugs for the moment
	checkstyle = false
	codenarc = false
	cpd = false
	pmd = false
	spotbugsEffort = 'min'
	spotbugsMaxRank = 1
}
