apply plugin: 'java-library-distribution'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

def SRU = "2021"

version = "SRU${SRU}-9.2.6-SNAPSHOT"
group 'com.prowidesoftware'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

allprojects {
	repositories {
		mavenCentral()
		jcenter()
	}

	tasks.withType(JavaCompile) {
		options.fork = true
		if (project.hasProperty('JDK8_HOME')) {
			options.forkOptions.executable = "$JDK8_HOME/bin/javac"
		}
		options.encoding = 'UTF-8'
	}

	sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']

	tasks.withType(Jar) {
		manifest.attributes(
				'Specification-Title': 'Prowide ISO 20022',
				'Specification-Version': project.version,
				'Specification-Vendor': "SRU${SRU}",
				'Implementation-Title': 'Prowide ISO 20022',
				'Implementation-Version': project.version,
				'Implementation-Vendor': 'www.prowidesoftware.com',
				'Built-OS': System.getProperty('os.name'),
				'Source-Compatibility': project.sourceCompatibility,
				'Target-Compatibility': project.targetCompatibility,
				'Built-Date': new Date().format("yyyy-MM-dd"),
				'Automatic-Module-Name': 'com.prowidesoftware.iso20022'
		)
	}
}

subprojects {
	apply plugin: 'java-library'

	version = rootProject.version

	dependencies {
		implementation 'org.apache.commons:commons-lang3:3.12.0'
		implementation 'com.google.code.gson:gson:2.8.9'
	}

	tasks.withType(Jar) {
		archivesBaseName = "pw-iso20022-${project.name}"
	}

	sourceSets.main.java.srcDirs = ['src/main/java', 'src/generated/java']
}

configure(subprojects.findAll {it.name != 'model-common-types'}) {
	dependencies {
		api project(':model-common-types')
	}
}

configure(subprojects.findAll {it.name.endsWith('-mx')}) {
	def specificTypesProject = ':' + it.name.replace('-mx', '-types')
	dependencies {
		api project(':iso20022-core')
		implementation project(specificTypesProject)
		implementation 'org.apache.commons:commons-lang3:3.12.0'
		implementation 'com.google.code.gson:gson:2.8.9'
	}
}

configure(subprojects.findAll {it.name.endsWith('-types')}) {
	javadoc.enabled = false
}

project(':iso20022-core') {
	dependencies {
		// included build
		api 'com.prowidesoftware:pw-swift-core'
		implementation 'org.apache.commons:commons-lang3:3.12.0'
		implementation 'com.google.code.gson:gson:2.8.9'

		compileOnly 'javax.persistence:javax.persistence-api:2.2'
		compileOnly group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'

		testImplementation('org.junit.jupiter:junit-jupiter:5.8.1')

		testImplementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'
		testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.21.0'
		testImplementation group: 'org.xmlunit', name: 'xmlunit-core', version: '2.8.3'
		testImplementation group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.8.3'
		testImplementation group: 'org.xmlunit', name: 'xmlunit-assertj', version: '2.8.3'
		testImplementation project(':model-acmt-mx')
		testImplementation project(':model-acmt-types')
		testImplementation project(':model-camt-mx')
		testImplementation project(':model-camt-types')
		testImplementation project(':model-catm-mx')
		testImplementation project(':model-catm-types')
		testImplementation project(':model-fxtr-mx')
		testImplementation project(':model-fxtr-types')
		testImplementation project(':model-pacs-mx')
		testImplementation project(':model-pacs-types')
		testImplementation project(':model-pain-mx')
		testImplementation project(':model-pain-types')
		testImplementation project(':model-sese-mx')
		testImplementation project(':model-sese-types')
		testImplementation project(':model-seev-mx')
		testImplementation project(':model-seev-types')
		testImplementation project(':model-xsys-mx')
		testImplementation project(':model-xsys-types')
	}

	tasks.withType(Jar) {
		archivesBaseName = 'pw-iso20022-core'
	}

	test {
		useJUnitPlatform()
	}
}

jar {
	dependsOn subprojects.jar
	archivesBaseName = 'pw-iso20022'
	subprojects.each { subproject ->
		from subproject.configurations.archives.allArtifacts.files.collect {
			zipTree(it)
		}
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	subprojects.each { subproject ->
		from subproject.sourceSets.main.allSource
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def formattedDate() {
	new Date().format('dd MMM yyyy')
}

//task aggregatedJavadoc(type: Javadoc) {
javadoc {
	group = 'Documentation'
	description = 'Generate javadocs from all child projects as if it was a single project'

	failOnError false
	destinationDir = file("$buildDir/docs/javadoc")

	options.overview = "overview.html"
	options.header = "${version}"
	options.windowTitle = "Prowide ISO 20022 API Reference"
	title = "Prowide ISO 20022 API Reference"
	options.footer="SRU${SRU}, generated ${formattedDate()}"
	options.author false
	options.links 'http://docs.oracle.com/javase/8/docs/api/'
	options.addStringOption 'Xdoclint:none', '-quiet'

	// this will fail when the option is not available (older JDK)
	options.addBooleanOption("-allow-script-in-comments", true)

	options.bottom = '<script src="//static.getclicky.com/js"></script><script>try{ clicky.init(101039278); }catch(e){}</script>'
	exclude "**/dic/**"

	subprojects.each { proj ->
		proj.tasks.withType(Javadoc).each { javadocTask ->
			source += javadocTask.source
			classpath += javadocTask.classpath
			excludes += javadocTask.excludes
			includes += javadocTask.includes
		}
	}
}

// declared dependencies for pom generation
dependencies {
	// included build (keep in sync with the latest Prowide Core version)
	api 'com.prowidesoftware:pw-swift-core:SRU2021-9.2.11'
	implementation 'org.apache.commons:commons-lang3:3.12.0'
	implementation 'com.google.code.gson:gson:2.8.9'
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			afterEvaluate {
				from components.java
				groupId = 'com.prowidesoftware'
				artifactId = 'pw-iso20022'
				version = "${version}"
				pom {
					name = 'Prowide ISO 20022'
					description = 'Prowide Library for ISO 20022 messages'
					url = 'http://www.prowidesoftware.com'
					scm {
						url = 'https://github.com/prowide/prowide-iso20022.git'
						connection = 'git@github.com:prowide/prowide-iso20022.git'
					}
					inceptionYear = '2020'
					licenses {
						license {
							name = 'Apache License Version 2.0'
							url = 'https://www.apache.org/licenses/LICENSE-2.0'
							distribution = 'repo'
						}
					}
					developers {
						developer {
							id = 'zubri'
							name = 'Sebastian Zubrinic'
							email = 'sebastian@prowidesoftware.com'
						}
					}
					organization {
						name = 'Prowide'
						url = 'http://www.prowidesoftware.com'
					}
				}
			}
		}
	}
}
jar.finalizedBy generatePomFileForMavenJavaPublication

// to avoid metadata in the generated pom.xml files
tasks.withType(GenerateModuleMetadata) {
	enabled = false
}

distributions {
	main {
		contents {
			from javadocJar
			from sourcesJar
			into ('lib') {
				from (rootProject.configurations.runtimeClasspath)
			}
			from files('LICENSE.txt')
			from files('CHANGELOG.txt')
			from ("$buildDir/publications/mavenJava/pom-default.xml") {
				rename ".*", "pom.xml"
			}
		}
	}
}

distTar.enabled = false

distZip {
	dependsOn generatePomFileForMavenJavaPublication
	doLast {
		if (!project.hasProperty('JDK8_HOME')) {
			println "*** WARNING: For releases an explicit JDK8_HOME variable must be set in gradle.properties ***"
		}
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task bundle(type: Zip, dependsOn: build) {
	description 'Creates the bundle.jar for Maven Central distribution'
	from jar
	from sourcesJar
	from javadocJar
	from ("$buildDir/publications/mavenJava/pom-default.xml") {
		rename ".*", "pom.xml"
	}
	archiveName 'bundle.zip'
}